f = open()

f.flush()
select
****************************

poll

from select import poll

1.创建poll对象
p = poll()
2.添加关注的IO

poll IO事件分类
POLLIN POLLOUT POLLERR POLLHUP    POLLPRI  POLLVAL
rlist  wlist   xlist    断开连接 紧急处理 无效数据

p.register(s,POLLIN | POLLERR)  注册监控对象
p.unreguster(s)  取消对IO的关注

3.进行监控
events = p.poll()
功能：监控关注的IO，阻塞等待IO发生
返回值：events是一个列表，列表中每个元素为一个元组，代表准备就绪需要处理的IO    （通过字典的注册 然后查找对比）

events


epoll
使用方法：与poll基本相同
* 生成对象使用epoll（）而不是poll（）
*register注册IO事件事件类型改为epoll事件类型

select  poll  epoll 区别
1.select 可以很好支持Windows
2.epoll比select和poll效率高，select和poll差不多
3.epoll提供了更多的触发方式


本地套接字

linux下文件类型

bcd-lsp

b块设备文件  c字符设备文件 d目录
-普通文件    l链接   s套接字 p管道

作用：用于本地不同程序（进程间的通信）间进行通信

本地套接字创建流程：
1.创建套接字对象
sockfd = socket（AF_UNIX，SOCK_STREAM）

2.绑定本地套接字文件
socket.bind(path)
path:一个文件    多态！！

3.监听
3.接受发送消息


cookie 

os.path.exists(path)
功能：判断一个文件夹下是否有某个文件 

In[4]:os.path.exists(',/tcp_client.py')
Out[4]:True

os.unlink(path)  os.remove(path)
功能：删除文件


多任务编程 

意义：通过应用程序利用多个计算机核心达到多任务同时执行的目的，以此来提升程序执行效率

实施方案：多进程，多线程

并行 ：多个计算机核心在同时处理多个任务，多个任务之间是并行关系 （多个人同时在干同一件事）

并发 ：计算机同时处理多个任务，内核在多个任务间不断切换，达到好像在同时处理的运行效果。此时多个任务实际为并发关系   （一个人在干很多事，单进程）

进程 ：程序在计算机中运行一次的过程

程序 ：是一个可执行文件，是静态的，占有磁盘，不占有计算机的运行资源

进程 : 进程是一个动态的过程描述，占有cpu内存等计算机资源的，有一定的生命周期    计算机分配资源的最小单位

*同一个程序的不同执行过程是不同的过程，因为分配的计算机资源等均不同

进程的创建流程
1.用户空间运行一个程序，发起进程创建
2.操作系统接受用户请求，开启进程创建
3.操作系统分配系统资源，确认进程状态
4.将创建好的进程提供给应用层使用

CPU时间片
如果一个进程占有计算机核心，我们称该进程在cpu时间片上。多个任务实际对cpu会进行争夺，一般由操作系统分配cpu时间片

PCB（进程控制块）
在操作系统中，进程创建后会自动产生一个空间存放进程信息，称为进程控制块

进程信息：进程PID，进程占有的内存位置，创建时间，用户……

进程PID：进程在操作系统中的唯一编号，大于0整数，由系统自动分配	

进程信息查看命令：ps -aux


进程特征
*进程是操作系统分配计算机资源的最小单位
*每个进程都有自己单独的虚拟内存空间
*进程间的执行相互独立，互不影响

进程的状态

三态

就绪态 ： 进程具备运行条件，等待系统分配处理器运行
运行态 ： 进程占有cpu处于运行的状态
等待态 ： 又称为阻塞态，睡眠态，指进程暂时不具备运行的条件，需要阻塞等待 
          （sleep  accept。。。）

五态

新建态 ： 创建一个进程，获取资源，直接表现为运行一个程序，或者在程序中创建新的进程

终止态 ： 进程执行结束，资源回收过程

ps -aux  ---> STAT 表示进程状态

D等待态  不可中断的等待
S等待态  可中断的等待
T等待态  暂停
R运行态
Z僵尸态

+前台进程
< 高优先级
N 低优先级
I 有进程链接
s 会话组组长

进程优先级

优先级决定了一个进程的执行权限和占有资源的优先程度

查看进程优先级
top ： 动态的查看进程优先级
取值范围： -20  --- 19  -20优先级最高

nice：指定优先级运行程度
    e.g. nice -9 ./while.py
         nice --9 ./while.py     -9优先级
         如果是负的需要加sudo 要不权限不够


父子进程

在系统中除了初始化进程每个进程都有一个父进程，可能有0个或者多个子进程。由此形成父子进程关系。我们认为每个进程都是父进程发起请求创建的。

进程（process）
查看进程数pstree
查看父子进程PID： ps -ajx


要求：什么是进程，进程和程序的区别
      了解进程的特征
      清楚进程的状态及状态间的转化关系
      并行和并发的区别，操作系统功能

编写一个程序，能够同时执行多个任务。同时要在程序运行过程中，根据情况创建进程

import os

pid = os.fork
功能： 创建一个新的进程
参数：无
返回值：失败返回一个负数   -1
        成功  在原有进程中返回新的进程的PID
              在新的进程中返回0

*子进程会复制父进程全部代码段，包括fork前的代码（复制整个内存空间）
*子进程从fork的下一句开始执行
*父子进程通常会根据fork返回值的差异选择执行不同的代码（使用if结构）
*子进程虽然复制父进程内存，但是有自己的特性
 比如PID号，PCB等
*父子进程空间独立，各自修改各自的内容，互不影响


过程中：
    sleep(1)  #让出内存资源让子进程先执行
    print('原来的进程')


作业：

写一个聊天室

功能：类似qq群聊

1.进入聊天室需要输入用户名
2.有人进入聊天室，其他人会收到提示
   xxx进入聊天室
3.某人发消息，则其他人都能收到
  xxx说： xxxxxxxx
4.有人退出聊天室 其他人会收到提示
 xxx退出了聊天室


服务端和客户端
*整体实现方案
*用什么技术



































